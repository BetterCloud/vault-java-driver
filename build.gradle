apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

group 'com.bettercloud'
archivesBaseName = 'vault-java-driver'
version '4.1.0'
ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly('org.projectlombok:lombok:1.18.4')

    testCompile('junit:junit:4.12')
    testCompile('org.mockito:mockito-core:2.23.4')
    testCompile('org.testcontainers:testcontainers:1.6.0')
    testCompile('org.eclipse.jetty:jetty-server:9.4.14.v20181114')
    testCompile('org.slf4j:slf4j-api:1.7.25')
    testCompile('org.bouncycastle:bcprov-jdk15on:1.60')
    testCompile('org.bouncycastle:bcpkix-jdk15on:1.60')

    testRuntime('org.slf4j:slf4j-simple:1.7.25')
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


//
// Separate unit tests from integration tests.  See: `src/test-integration/README.md`
//

configurations {
    unitTestsCompile.extendsFrom testCompile
    unitTestsRuntime.extendsFrom testRuntime
    integrationTestsCompile.extendsFrom testCompile
    integrationTestsRuntime.extendsFrom testRuntime
}

sourceSets {
    unitTests {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java.srcDir file('src/test/java')
    }
    integrationTests {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java.srcDir file('src/test-integration/java')
        resources.srcDirs += file('src/test-integration/resources')
    }
}

task unitTest(type: Test) {
    testClassesDirs = sourceSets.unitTests.output.classesDirs
    classpath = sourceSets.unitTests.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task integrationTest(type: Test) {
    testClassesDirs= sourceSets.integrationTests.output.classesDirs
    classpath = sourceSets.integrationTests.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
    }
}

//
// Deploying releases to Maven Central (or snapshots to a local Nexus repository).
//
// Snapshots are not signed... but signing the release artifact requires the following project properties:
//
// signing.keyId = <ID of the private key in your secure keyring used for signing JAR's>
// signing.password = <public key password>
// signing.secretKeyRingFile = <full path to your keyring file (i.e secring.gpg)>
//
if (!hasProperty('ossrhUsername')) {
    ext.ossrhUsername = ''
}
if (!hasProperty('ossrhPassword')) {
    ext.ossrhPassword = ''
}
if (!hasProperty('nexusUrl')) {
    ext.nexusUrl = ''
}
if (!hasProperty('nexusUsername')) {
    ext.nexusUsername = ''
}
if (!hasProperty('nexusPassword')) {
    ext.nexusPassword = ''
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

//            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
            snapshotRepository(url: nexusUrl) {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            pom.project {
                name 'vault-java-driver'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Zero-dependency Java client for HashiCorp\'s Vault'
                url 'https://github.com/BetterCloud/vault-java-driver'

                scm {
                    connection 'https://github.com/BetterCloud/vault-java-driver.git'
                    developerConnection 'https://github.com/BetterCloud/vault-java-driver.git'
                    url 'https://github.com/BetterCloud/vault-java-driver'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://github.com/BetterCloud/vault-java-driver/blob/master/README.md'
                    }
                }

                developers {[
                    developer {
                        id 'steve-perkins'
                        name 'Steve Perkins'
                        email 'steve@steveperkins.com'
                    },
                    developer {
                        id 'steve-perkins-bc'
                        name 'Steve Perkins'
                        email 'steve.perkins@bettercloud.com'
                    },
                    developer {
                        id 'jarrodcodes'
                        name 'Jarrod Young'
                        email 'jarrodsy@gmail.com'
                    }
                ]}
            }
        }
    }
}

